## WIP zone for 24

14 identical chunks.
Counting z in base 26
Former vars as lowercase at block entry, new as capital

## A BLOCK
x = z % 26 + C_1 [RANGE: C_1 -- C_1 + 25]
    with C_1 in [11, 14, 10, 14, -8, 14, -11, 10, -6, -9, 12, -5, -4, -9] C_1

    C_1 two possibilities
        10 to 14 -> x in [ 10, 39] CASE 1
       -11 to -4 -> x in [-11, 21] CASE 2
    
X = x neq input() # input is in [1-9]
    if CASE 1 -> X = 1
    if CASE 2 -> maybe X = 0 if we have a match

Z = z // [1, 1, 1, 1, 26, 26, 1, 26, 1, 26, 26, 26, 26, 26] M


ZZ = Z * (25 * X + 1)           i.e Z*1 OR Z*26.
Y = (input() + C) * X for C in [7,8,16,8,3,12,1,8,8,14,4,14,15,6] C_2
ZZZ += Y
(z = ZZZ for next block)
Question: ZZZ = 0 after 14 blocks???

LSB (z) [0-25] + C_1
    [C_1 - C1+25]
if C_1 >= 10 ---> x can't eq. input (1-9) ergo X=1. No fork.

if X is 1 we add a digit to Z

99699 8 9 7 9 6 9 8
z = 8079335 | QQQQQ

5: subs last digit. 1-9 -> M-U
if choosing 8, then
6: can no-add (9) to
z = 8079338 | QQQQT

7: subs last digit. 1-9 -> I-Q (8079327 to 8079335)
if choose 7, then
8: can no-add (9)
z = 8079333 | QQQQO

9: drops and no-add for 6
z = 310743 | QQQQ

10: subs last digit. 1-9 -> E-M (310731 to 310739)
if choose 9, then
11: can drop no-add (8)
z = 11951 | QQQ

12: can't drop for 11 = 8... can only drop at QQM highest
so 3 had to be a 6.

13: can drop e.z but we'll have left what we put in at 1. Which can't be zero.
So we HAVE to not add at step 4.


OK reasoning by pairs:

0-13
3-9 | 1-7

1-12
1-5 | 5-9

2-9
1-2 | 8-9

3-4
1-9 | 1-9

5-6
1-8 | 2-9

7-8
1-7 | 3-9

10-11
2-9 | 1-8

9529 9897 9998 97
xxxx xxxx xxxx xx
3111 1121 3821 51